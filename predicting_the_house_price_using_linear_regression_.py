# -*- coding: utf-8 -*-
"""Predicting the house price using linear regression .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aDcTS4eFksBGgyoVXRp684sMjGWA6QYE
"""



"""# importing libraries

"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
from sklearn.metrics import r2_score , mean_squared_error,mean_absolute_error

data = pd.read_csv('/content/USA_Housing.csv')

data

data.head()

data.info()

data.columns

"""# Data preprocessing

missing value treatment
"""

data.isnull().sum()

data.isnull().sum()/len(data)*100

"""Encoding concept

"""

data.head()



"""# Exploratory Data Analysis for House Price Prediction"""

sns.pairplot(data)

sns.distplot(data['Price'])

sns.heatmap(data.corr(), annot=True)

"""# Split the data into training and test for building the model and for prediction"""

X = data[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
               'Avg. Area Number of Bedrooms', 'Area Population']]

y = data['Price']

"""Split Data into Train, Test"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=101)

print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

"""# Creating and Training the LinearRegression Model"""

from sklearn.linear_model import LinearRegression

lm = LinearRegression()

lm.fit(X_train,y_train)

print(lm.intercept_)
print()
print(lm.coef_)

X.columns

"""## LinearRegression Model Evaluation"""

print(lm.intercept_)

coeff_df = pd.DataFrame(lm.coef_,X.columns,columns=['Coefficient'])
coeff_df

"""## Predictions from our Linear Regression Model"""

y_pred_price = lm.predict(X_test)
y_pred_price_train = lm.predict(X_train)

y_pred_price

y_test

"""# Validate the actual price of the test data and predicted price"""

from sklearn.metrics import mean_squared_error

mean_squared_error (y_test,y_pred_price)

lm.score(X_test,y_test)

from sklearn.metrics import r2_score

r2_score (y_test,y_pred_price)

"""# linear graph"""

plt.scatter(y_test,y_pred_price)

##In the above scatter plot, we see data is in line shape, which means our model has done good predictions.

sns.distplot((y_pred_price),bins=50);

# In the above histogram plot, we see data is in bell shape (Normally Distributed), which means our model has done good predictions.